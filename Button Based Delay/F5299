#include <msp430.h> 

int main(void)
{
   WDTCTL = WDTPW | WDTHOLD;   // Stops the watchdog timer
   P1DIR |= 0X01;              //sets P1.0 (red LED) as an output
   P1REN |= BIT1;              //sets P1.1 to be pull up/down enabled
   P1OUT |= BIT1;              //sets P1.1 to pull up resistor
   P1OUT |= 0X01;              //sets P1.0 (red LED) on
   P1IE |= BIT1;               //enables interrupt on P1.1
   P1IES |= BIT1;              //enables high - to - low behavior on interrupt on P1.1
   TA0CCTL0 = CCIE;            //CCR0 Interrupt Enabled
   TA0CCR0 =  103;             //sets frequency to 10HZ


   TA0CTL = TASSEL_1 + MC_1+ID_3;          // ACLK selected, Up-Mode, Divider set to 4
__enable_interrupt();

   while (1)
   {
   }
}
#pragma vector = TIMER0_A0_VECTOR   //Timer Interrupt that is triggered when clock counts up to CCR0 value

   __interrupt void Timer_A ()
   {
       P1OUT ^= 0X01;   //toggles red LED
   }

#pragma vector=PORT1_VECTOR //Port 1 Interrupt that is triggered on button press (PIN 1.0) from high to low

__interrupt void Port_1(void)
{
   if (P1IES & BIT1) //checks to see if P1IES AND BIT1 are equal to 1.
   {
       TA0CTL = TACLR; //clear values in clock's register
       TA0CTL = TASSEL_1 + MC_2 + ID_3;  //Clock is changed to Continuous mode but maintains ACLK and Divider 8
       P1IES &= ~BIT1; //edge select is set to 0 (Low-to-High)
   }
   else
   {
       TA0CCR0 = TA0R; //Value in CCR0 is replaced by value in Timer A's register.
       TA0CTL = TASSEL_1 + MC_1 + ID_3;  //Revert back to Up-Mode but maintains ACLK and Divider 8.
       P1IES |= BIT1; //Edge select is set back to 1 (High-to-Low)
   }
       P1IFG &= ~BIT1; //clear interrupt flag
}
