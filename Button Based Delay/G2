#include <msp430.h>

int main(void)
{
   WDTCTL = WDTPW | WDTHOLD;   // Stop watchdog timer
   BCSCTL3 = LFXT1S_2; //enables crystal
   P1DIR |= 0X41; //sets P1.0 (green LED) and P1.6 (red LED) as an output
   P1REN |= BIT3; //sets P1.3 to be pull up/down enabled
   P1OUT |= BIT3; //sets P1.3 to pull up
   P1OUT |= 0X41; //sets P1.0 (green LED) and P1.6 (red LED) on
   P1IE |= BIT3; //enables interrupt on PIN 1.3 (Button)
   P1IES |= BIT3; //enables high-to-low behavior on interrupt on P1.3
   CCTL0 = CCIE; //enables interrupts
   CCR0 =  103;  //sets frequency to 10HZ
   TACTL = TASSEL_1 + MC_1 + ID_3;// ACLK selected, Up-Count, Divider = 8

__enable_interrupt();

   while (1)
   {
   }
}

#pragma vector = TIMER0_A0_VECTOR //Timer Interrupt that is triggered when clock counts up to CCR0 value

   __interrupt void Timer_A ()
   {
       P1OUT ^= 0X41; //toggles P1.0 and P1.6 (red and green LEDs)
   }

#pragma vector=PORT1_VECTOR //Port 1 Interrupt that is triggered when Pin 1.3 (BUTTON) changes from high to low

__interrupt void Port_1(void)
{
   if (P1IES & BIT3) //If P1IES AND BIT3 are 1, it will perform the following code.
   {
       TACTL = TACLR; //clears value stored in Timer A's register
       TACTL = TASSEL_1 + MC_2 + ID_3;  //changes clock mode to continuous
       P1IES &= ~BIT3; //sets Port 1's edge select to 0 (Low - to - High)
   }
   else
   {
   CCR0 = TA0R; //sets value in CCR0 register to the value in Timer A's register
   TACTL = TASSEL_1 + MC_1 + ID_3;  //reverts clock mode back to Up-Count mode
   P1IES |= BIT3; //sets Port 1's edge select to 1 (High - to - Low)
   }
   P1IFG &= ~BIT3; //resets interrupt flag
}
